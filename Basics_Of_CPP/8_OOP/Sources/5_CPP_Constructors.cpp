// Advanced Topics of the C++ Constructor

/*
Default Constructor
    - Does not take any arguments. Also called the no-args constructor.
    - If we do not provide a defualt constructor, then C++ will generate a defualt constructor that does nothing.
    - The defualt constructor is called when you initialize a new object with no arguments.
    
    - ex) 

        public: 
            Account() {
                name = "None";
                balance = 0.00;
            }

    - Now we can make a constructor that takes in arguments:

        public:
            Account(std::string name_val, double bal) {
                name = name_val;
                balance = bal;
            }

    - Once a constructor is defined for the class, C++ will NOT generate a defualt constructor. If we need to use a defualt
        constructor then we need to manually define the defualt constructor along with the other constructors.
    - Generally we want to provide our own defualt constructor.

Overloaded Constructors:
    - Classes can have as many constructors as needed.
    - Each constructor must have a unique signature.
    - The compiler must determine which constuctor is called based on the the initialization information provided when creating
        objects. If there is any ambiguity the compiler will NOT guess which constructor is called, and it will throw an error.
    - Defualt constructor will no longer be automatically generated by the compiler once another constructor is declared.
    - The best programming practice is to initialize all class attributes such that that no attributes contain any garbage data.
*/


#include <iostream>


int main() {

    return 0;
}
